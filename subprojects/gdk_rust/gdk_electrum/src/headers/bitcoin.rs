use crate::error::*;
use crate::headers::compute_merkle_root;
use crate::spv::calc_difficulty_retarget;
use bitcoin::blockdata::constants::{genesis_block, DIFFCHANGE_INTERVAL, TARGET_BLOCK_SPACING};
use bitcoin::consensus::{deserialize, serialize};
use bitcoin::hashes::hex::FromHex;
use bitcoin::{BlockHash, Txid};
use bitcoin::{BlockHeader, Network};
use electrum_client::GetMerkleRes;
use log::{info, warn};
use std::collections::HashMap;
use std::fs::{File, OpenOptions};
use std::io::{Read, Seek, SeekFrom, Write};
use std::path::{Path, PathBuf};
use std::sync::Mutex;

lazy_static! {
    pub static ref HEADERS_FILE_MUTEX: HashMap<Network, Mutex<()>> = {
        let mut m = HashMap::new();
        m.insert(Network::Bitcoin, Mutex::new(()));
        m.insert(Network::Testnet, Mutex::new(()));
        m.insert(Network::Regtest, Mutex::new(()));
        m.insert(Network::Signet, Mutex::new(()));  // unused
        m
    };
}

#[derive(Debug)]
pub struct HeadersChain {
    path: PathBuf,
    height: u32,
    last: BlockHeader,
    checkpoints: HashMap<u32, BlockHash>,
    pub network: Network,
}

impl HeadersChain {
    /// Create a chain of headers which is persisted inside given `path` parameter using a file name
    /// dependent on the given `network`
    ///
    /// if the file doesn't exist, a chain with only the genesis block (relative to `network`) is returned
    pub fn new<P: AsRef<Path>>(path: P, network: Network) -> Result<HeadersChain, Error> {
        std::fs::create_dir_all(path.as_ref())?;
        let mut filepath: PathBuf = path.as_ref().into();
        filepath.push(format!("headers_chain_{}", network));
        let checkpoints = get_checkpoints(network);
        if !filepath.exists() {
            info!("{:?} chain file doesn't exist, creating", filepath);
            let last = genesis_block(network).header;
            let mut file = File::create(&filepath)?;
            file.write_all(&serialize(&last))?;
            let height = 0;

            Ok(HeadersChain {
                path: filepath,
                height,
                last,
                checkpoints,
                network,
            })
        } else {
            info!("{:?} chain file exists, reading", filepath);
            let mut file = File::open(&filepath)?;
            let file_size = file.metadata()?.len();
            if file_size % 80 != 0 || file_size < 80 {
                return Err(Error::InvalidHeaders);
            }
            let wanted_seek = file_size - 80;
            let effective_seek = file.seek(SeekFrom::Start(wanted_seek))?;
            if wanted_seek != effective_seek {
                warn!("Seek failed wanted:{} effective:{}", wanted_seek, effective_seek);
                return Err(Error::Generic("failed seek".into()));
            }
            let mut buf = [0u8; 80];
            file.read_exact(&mut buf)?;
            let height = (file_size as u32 / 80) - 1;
            let last: BlockHeader = deserialize(&buf)?;

            Ok(HeadersChain {
                path: filepath,
                height,
                last,
                checkpoints,
                network,
            })
        }
    }

    pub fn height(&self) -> u32 {
        self.height
    }

    fn pow_allow_min_difficulty_blocks(&self) -> bool {
        // Special difficulty rule for testnet and regtest:
        // If the next block's timestamp is more than 2* 10 minutes
        // then allow mining a min-difficulty block.
        // Source: https://github.com/bitcoin/bitcoin/blob/master/src/pow.cpp
        match self.network {
            Network::Testnet | Network::Regtest => true,
            _ => false,
        }
    }

    fn curr_bits(&self) -> Result<u32, Error> {
        if self.pow_allow_min_difficulty_blocks() {
            let mut height = self.height();
            // loop at most DIFFCHANGE_INTERVAL times
            let bits = loop {
                let header = self.get(height)?;
                if height == 0
                    || height % DIFFCHANGE_INTERVAL == 0
                    || header.difficulty(self.network) != 1
                {
                    break header.bits;
                }
                height -= 1;
            };
            Ok(bits)
        } else {
            Ok(self.tip().bits)
        }
    }

    pub fn get(&self, height: u32) -> Result<BlockHeader, Error> {
        let mut file = File::open(&self.path)?;
        let wanted_seek = height as u64 * 80;
        let effective_seek = file.seek(SeekFrom::Start(wanted_seek))?;
        if wanted_seek != effective_seek {
            warn!("Seek failed wanted:{} effective:{}", wanted_seek, effective_seek);
            return Err(Error::Generic("failed seek".into()));
        }
        let mut buf = [0u8; 80];
        file.read_exact(&mut buf)?;
        let header: BlockHeader = deserialize(&buf)?;
        Ok(header)
    }

    /// to handle reorgs, it's necessary to remove some of the last headers
    pub fn remove(&mut self, headers_to_remove: u32) -> Result<(), Error> {
        let headers_to_remove = headers_to_remove.min(self.height);
        let new_height = self.height - headers_to_remove;
        let new_size = (new_height + 1) as u64 * 80;
        let file = OpenOptions::new().write(true).open(&self.path)?;
        self.last = self.get(new_height)?;
        self.height = new_height;
        file.set_len(new_size)?;
        Ok(())
    }

    pub fn tip(&self) -> BlockHeader {
        self.last
    }

    /// write new headers to the file if checks are passed
    pub fn push(&mut self, new_headers: Vec<BlockHeader>) -> Result<(), Error> {
        let mut curr_bits = self.curr_bits()?;
        let mut serialized = Vec::with_capacity(new_headers.len() * 80);
        let mut cache = HashMap::new();
        for new_header in new_headers {
            let new_height = self.height + 1;
            if self.last.block_hash() != new_header.prev_blockhash
                || new_header.validate_pow(&new_header.target()).is_err()
            {
                return Err(Error::InvalidHeaders);
            }

            if new_height % DIFFCHANGE_INTERVAL == 0 {
                if let Network::Regtest = self.network {
                    // regtest doesn't retarget https://github.com/bitcoin/bitcoin/blob/7fcf53f7b4524572d1d0c9a5fdc388e87eb02416/src/pow.cpp#L51
                } else {
                    let first_height = new_height - DIFFCHANGE_INTERVAL;
                    let first = match cache.remove(&first_height) {
                        Some(header) => header,
                        None => self.get(first_height)?,
                    };
                    let new_target = calc_difficulty_retarget(&first, &self.last);
                    if new_header.bits != BlockHeader::compact_target_from_u256(&new_target) {
                        return Err(Error::InvalidHeaders);
                    }
                    curr_bits = new_header.bits;
                }
            } else {
                if new_header.bits != curr_bits {
                    if !self.pow_allow_min_difficulty_blocks()
                        || new_header.difficulty(self.network) != 1
                        || new_header.time.checked_sub(self.last.time).unwrap_or(0)
                            <= 2 * TARGET_BLOCK_SPACING
                    {
                        return Err(Error::InvalidHeaders);
                    }
                }
            }
            if let Some(hash) = self.checkpoints.get(&new_height) {
                if hash != &new_header.block_hash() {
                    return Err(Error::InvalidHeaders);
                }
                info!("checkpoint {} {} is ok", new_height, hash);
            }
            cache.insert(new_height, new_header.clone());
            serialized.extend(serialize(&new_header));
            self.last = new_header;
            self.height = new_height;
        }
        self.flush(&mut serialized)?;
        info!(
            "chain tip height {} hash {} file {:?}",
            self.height,
            self.tip().block_hash(),
            self.path
        );
        Ok(())
    }

    /// verify the given txid and the proof against our chain of headers
    pub fn verify_tx_proof(
        &self,
        txid: &Txid,
        height: u32,
        merkle: GetMerkleRes,
    ) -> Result<(), Error> {
        let calculated_merkle_root = compute_merkle_root(txid, merkle)?;

        let header = self.get(height)?;
        if header.merkle_root == calculated_merkle_root {
            info!("proof for txid {}, block height {}, merkle root matches", txid, height);
            Ok(())
        } else {
            Err(Error::InvalidHeaders)
        }
    }

    /// write `serialized` bytes to the file, forcing flush so we are sure next `get()` will have
    /// also this data if requested
    fn flush(&mut self, serialized: &mut Vec<u8>) -> Result<(), Error> {
        if !serialized.is_empty() {
            let mut file = OpenOptions::new().append(true).open(&self.path)?;
            file.write_all(&serialized)?;
            file.flush()?;
            serialized.clear();
        }
        Ok(())
    }
}

fn get_checkpoints(network: Network) -> HashMap<u32, BlockHash> {
    let mut checkpoints = HashMap::new();
    let mut i = |n, s| checkpoints.insert(n, BlockHash::from_hex(s).unwrap());
    match network {
        Network::Bitcoin => {
            i(100_000, "000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506");
            i(200_000, "000000000000034a7dedef4a161fa058a2d67a173a90155f3a2fe6fc132e0ebf");
            i(300_000, "000000000000000082ccf8f1557c5d40b21edabb18d2d691cfbf87118bac7254");
            i(400_000, "000000000000000004ec466ce4732fe6f1ed1cddc2ed4b328fff5224276e3f6f");
            i(500_000, "00000000000000000024fb37364cbf81fd49cc2d51c09c75c35433c3a1945d04");
            i(600_000, "00000000000000000007316856900e76b4f7a9139cfbfba89842c8d196cd5f91");
            i(700_000, "0000000000000000000590fc0f3eba193a278534220b2b37e9849e1a770ca959");
            i(720_000, "00000000000000000000664d48a530c8a9047ae31f6ba81ff5c49c22072d4536");
        }
        Network::Testnet => {
            i(1_000_000, "0000000000478e259a3eda2fafbeeb0106626f946347955e99278fe6cc848414");
            i(2_000_000, "000000000000010dd0863ec3d7a0bae17c1957ae1de9cbcdae8e77aad33e3b8c");
            i(2_100_000, "000000000000002befeeec5aaa3b675ef421896c870e28669f00b0932e277eef");
        }
        Network::Regtest | Network::Signet => (),
    };
    checkpoints
}

#[cfg(test)]
mod test {
    use crate::headers::bitcoin::HeadersChain;
    use bitcoin::consensus::encode::Decodable;
    use bitcoin::hash_types::BlockHash;
    use bitcoin::hashes::hex::FromHex;
    use bitcoin::{BlockHeader, Network};
    use electrum_client::GetMerkleRes;
    use std::io::Cursor;
    use tempfile::TempDir;

    #[test]
    fn test_headers() {
        // first 199 bitcoin block headers, excluding the genesis_block
        let bitcoin_headers = "";
        let bitcoin_headers = Vec::<u8>::from_hex(bitcoin_headers).unwrap();
        let mut cursor = Cursor::new(&bitcoin_headers);
        let mut parsed_headers = vec![];
        while let Ok(header) = BlockHeader::consensus_decode(&mut cursor) {
            parsed_headers.push(header);
        }
        assert_eq!(parsed_headers.len(), 199);

        let temp = TempDir::new().unwrap();
        let mut chain = HeadersChain::new(&temp, Network::Bitcoin).unwrap();
        chain.push(parsed_headers).unwrap();
        assert_eq!(chain.height(), 199);

        assert_eq!(
            BlockHash::from_hex("000000007bc154e0fa7ea32218a72fe2c1bb9f86cf8c9ebf9a715ed27fdb229a")
                .unwrap(),
            chain.get(100).unwrap().block_hash()
        );

        // first non-coinbase tx
        let txid = bitcoin::Txid::from_hex(
            "f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16",
        )
        .unwrap();
        let block_height = 170;
        let merkle_tree = GetMerkleRes {
            block_height,
            pos: 1,
            merkle: vec![[
                177, 254, 165, 36, 134, 206, 12, 98, 187, 68, 43, 83, 10, 63, 1, 50, 184, 38, 199,
                78, 71, 61, 31, 44, 34, 11, 250, 120, 17, 28, 80, 130,
            ]],
        };
        chain.verify_tx_proof(&txid, block_height as u32, merkle_tree).unwrap();

        // test a coinbase,
        let txid = bitcoin::Txid::from_hex(
            "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b",
        )
        .unwrap();
        let block_height = 0;
        let merkle_tree = GetMerkleRes {
            block_height: 0,
            pos: 0,
            merkle: vec![],
        };
        chain.verify_tx_proof(&txid, block_height as u32, merkle_tree).unwrap();

        let merkle_tree = GetMerkleRes {
            block_height: 0,
            pos: 0,
            merkle: vec![],
        };
        assert!(
            chain.verify_tx_proof(&txid, 1, merkle_tree).is_err(),
            "wrong block height should error"
        );

        // first non-coinbase tx, changed first byte of merkle proof
        let txid = bitcoin::Txid::from_hex(
            "f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16",
        )
        .unwrap();
        let block_height = 170;
        let merkle_tree = GetMerkleRes {
            block_height,
            pos: 1,
            merkle: vec![[
                176, 254, 165, 36, 134, 206, 12, 98, 187, 68, 43, 83, 10, 63, 1, 50, 184, 38, 199,
                78, 71, 61, 31, 44, 34, 11, 250, 120, 17, 28, 80, 130,
            ]],
        };
        assert!(chain.verify_tx_proof(&txid, block_height as u32, merkle_tree).is_err());

        assert!(
            chain.push(vec![chain.get(100).unwrap()]).is_err(),
            "pushing a previous block should err"
        );

        let old_tip = chain.tip();
        chain.remove(1).unwrap();
        assert_eq!(chain.height, 198);
        assert!(chain.get(199).is_err());
        chain.push(vec![old_tip]).unwrap();
        assert_eq!(chain.height, 199);
        assert_eq!(
            BlockHash::from_hex("00000000e85458c1467176b04a65d5efaccfecaaab717b17a587b4069276e143")
                .unwrap(),
            chain.get(198).unwrap().block_hash()
        );
        assert_eq!(
            BlockHash::from_hex("00000000b7691ccc084542565697eca256e56bb7f67e560b48789db27f0468eb")
                .unwrap(),
            chain.get(199).unwrap().block_hash()
        );
        assert!(chain.get(200).is_err());
    }
}
